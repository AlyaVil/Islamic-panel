// just a look at making islamic patterms
// first made by eye
// then created the points required using cossing points of the lines
// could use these points with laser cutter
// adjust the size with sliders

// plan
// save colours
// write out points for laser cutting
//
// nice to have
// graduated polygons, grad from a point, or use perlin noise

let box = 1
let boxLeft = 500
let boxTop = 20
let boxSize = 80
let boxes = 7
let sliders = 3
let sliderTop = 240
let sliderLeft = 1200
let sliderWidth = 30
let sliderHeight = 200
let M = []
let P = []
let S = [40,94,40]
let SIZE = [300,200,8]
let SMAX = [300,650,10]
let pTop = 400
let pLeft = 600
let pMax = 650
let z = 0

let palX = 30
let palY = 750
let palW = 70
let palH = 50
let palN = 0
let palMax = 12
let PAL
let RBOW

let SHOWLINES = false
let SHOWPOINTS = false
let drawLines = false

let WHEELDIAMETER = 300
let WHEELY = 650
let WHEELX = 1100
let WHEELLAYER = 40

function setup() {
	createCanvas(windowWidth, windowHeight)
	background(0,0,80);
	stroke(250)
	textSize(16);

	angleMode(DEGREES)
	makeByEye(160, 200, 15)
	makeByNumber(1050, 200, 10)
	
	// set default sizes
	for (let i=0; i<SIZE.length; i++) {
			SIZE[i] = (S[i]*SMAX[i] / 100)
	}
	
	PAL = []
	for (let i=0; i<palMax; i++) {
		PAL.push(color(random(255), random(255), random(255)))
	}
	
	setRainbow()
}

function draw() {
	drawBoxes(box)
	drawPalette(palN)
	drawSliders()
	drawColourWheel()
	angleMode(DEGREES)
	drawPattern()
}

function mousePressed() {
	if (pointInBox(mouseX,mouseY, boxLeft, boxTop,  boxes*boxSize, boxSize/2)) {
		box = int((mouseX - boxLeft)/boxSize)
		draw12(box)
	} else if (pointInBox(mouseX, mouseY, sliderLeft, sliderTop, sliders*sliderWidth, sliderHeight)) {
  	let slider = int((mouseX - sliderLeft) / sliderWidth)
		let percent = 100 - int((mouseY - sliderTop)*100/sliderHeight)
		S[slider] = percent
		for (let i=0; i<SIZE.length; i++) {
			SIZE[i] = floor(1 + (S[i]*SMAX[i] / 100))
		}
//		println(SIZE[2])
	} else if (pointInBox(mouseX, mouseY, sliderLeft+2*sliderWidth,sliderTop - 1.5*sliderWidth, sliderWidth, sliderWidth )) {
		drawLines = !drawLines
	} else if (pointInBox(mouseX, mouseY, palX, palY, palMax*(palW+4), palH)) {
		let choice = floor((mouseX - palX)/(palW + 4))
		palN = choice
	} else if (pointInBox(mouseX, mouseY, WHEELX-WHEELDIAMETER/2, WHEELY-WHEELDIAMETER/2, WHEELDIAMETER, WHEELDIAMETER)) {
		// probably on colour wheel
		let tan = (mouseY - WHEELY)/(mouseX - WHEELX)
		let angle = Math.atan(tan)
		if (tan < 0) {
			if (mouseX > WHEELX) {
				angle += 2*PI
			} else { 
				angle += PI
			}
		} else {
			if (mouseX < WHEELX) {
					angle += PI
			}
		}
		let n = floor(angle/(PI/6))
		// set colour
		let colr = RBOW[n]
		
		// set darkness/lightness
		let cent = sqrt(sq(mouseY - WHEELY) + sq(mouseX - WHEELX))
		n = floor((WHEELDIAMETER/2 - cent)/(WHEELLAYER/2))
		// println( cent + " " + n )
		if (n<2) {
			// lighten
			colr = shadeBlendConvert ( 0.3*(2-n), colr );
		} else if (n>2) {
			// darken
			colr = shadeBlendConvert ( -0.1*(n-2), colr );
		} 
		PAL[palN] = colr

	} else {
			
	}
}
function drawPattern() {
	fill(PAL[0])
	ellipse(pLeft, pTop, pMax, pMax)		// outer circle
	noStroke()
	fill(PAL[1])
	ellipse(pLeft, pTop, SIZE[1])
	
	makePoints(pLeft, pTop, SHOWPOINTS, SHOWLINES)
	drawFinalPolys(true, drawLines)
	drawMidPolys(true, drawLines)
	drawOuterPolys(true, drawLines)
	drawInnerPolys(true, drawLines)
}

// draw palette with one selected
function drawPalette (n) {
	push()
	strokeWeight(3)
	for (let i=0; i<palMax; i++) {
		noFill()
		if (i == n) {
			stroke('red')
		} else {
			stroke('white')
		}
		fill(PAL[i])
		rect(palX+i*(palW+4), palY, palW, palH, 20)
	}
	pop()
}

function setRainbow() {
	RBOW = []
	for (var i = 0; i < 12; i++) {
		if (i<2) {
			from = '#ff0000';
			to = '#ffff00';
			colr = shadeBlendConvert(i/2, from, to)
		} else if (i<4) {
			from = '#ffff00';
			to = '#00ff00';
			colr = shadeBlendConvert((i-2)/2, from, to)
		} else if (i<6) {
			from = '#00ff00';
			to = '#00ffff';
			colr = shadeBlendConvert((i-4)/2, from, to)
		} else if (i<8) {
			from = '#00ffff';
			to = '#0000ff';
			colr = shadeBlendConvert((i-6)/2, from, to)
		} else if (i<10) {
			from = '#0000ff';
			to = '#ff00ff';
			colr = shadeBlendConvert((i-8)/2, from, to)
		} else {
			from = '#ff00ff';
			to = '#ff0000';
			colr = shadeBlendConvert((i-10)/2, from, to)
		}
		RBOW.push(colr)
	}
}
function drawColourWheel() {
	let colr
	push()
	angleMode(RADIANS)
	let lastAngle = 0  // . -PI/2 - PI/12;
  for (var i = 0; i < 12; i++) {
		colr = RBOW[i]
		let lighter = shadeBlendConvert ( 0.6, colr );
    fill(lighter);
    let diam = WHEELDIAMETER
    arc(WHEELX, WHEELY, diam, diam, lastAngle, lastAngle+PI/6);
		lighter = shadeBlendConvert ( 0.4, colr );
    fill(lighter);
    diam = diam - WHEELLAYER
    arc(WHEELX, WHEELY, diam, diam, lastAngle, lastAngle+PI/6);
		fill(colr);
		diam = diam - WHEELLAYER
    arc(WHEELX, WHEELY, diam, diam, lastAngle, lastAngle+PI/6);
		let darker = shadeBlendConvert ( -0.1, colr );
    fill(darker);
		diam = diam - WHEELLAYER
    arc(WHEELX, WHEELY, diam, diam, lastAngle, lastAngle+PI/6);
		darker = shadeBlendConvert ( -0.2, colr );
    fill(darker);
		diam = diam - WHEELLAYER
    arc(WHEELX, WHEELY, diam, diam, lastAngle, lastAngle+PI/6);
    darker = shadeBlendConvert ( -0.3, colr );
    fill(darker);
		diam = diam - WHEELLAYER
    arc(WHEELX, WHEELY, diam, diam, lastAngle, lastAngle+PI/6);
    lastAngle += PI/6;
		pop()
  }
	
	/*
	fill(100)
	ellipse(LEFT + 2*(DIAMETER  + GAP), TOP, 100, 100)
	ellipse(LEFT + 3*(DIAMETER  + GAP), TOP, 100, 100)
	ellipse(LEFT + 3*(DIAMETER  + GAP), TOP + 1*(DIAMETER  + GAP), 100, 100)
	*/

}

const shadeBlendConvert = function (p, from, to) {
    if(typeof(p)!="number"||p<-1||p>1||typeof(from)!="string"||(from[0]!='r'&&from[0]!='#')||(to&&typeof(to)!="string"))return null; //ErrorCheck
    if(!this.sbcRip)this.sbcRip=(d)=>{
        let l=d.length,RGB={};
        if(l>9){
            d=d.split(",");
            if(d.length<3||d.length>4)return null;//ErrorCheck
            RGB[0]=i(d[0].split("(")[1]),RGB[1]=i(d[1]),RGB[2]=i(d[2]),RGB[3]=d[3]?parseFloat(d[3]):-1;
        }else{
            if(l==8||l==6||l<4)return null; //ErrorCheck
            if(l<6)d="#"+d[1]+d[1]+d[2]+d[2]+d[3]+d[3]+(l>4?d[4]+""+d[4]:""); //3 or 4 digit
            d=i(d.slice(1),16),RGB[0]=d>>16&255,RGB[1]=d>>8&255,RGB[2]=d&255,RGB[3]=-1;
            if(l==9||l==5)RGB[3]=r((RGB[2]/255)*10000)/10000,RGB[2]=RGB[1],RGB[1]=RGB[0],RGB[0]=d>>24&255;
        }
 return RGB;}
    var i=parseInt,r=Math.round,h=from.length>9,h=typeof(to)=="string"?to.length>9?true:to=="c"?!h:false:h,b=p<0,p=b?p*-1:p,to=to&&to!="c"?to:b?"#000000":"#FFFFFF",f=this.sbcRip(from),t=this.sbcRip(to);
    if(!f||!t)return null; //ErrorCheck
    if(h)return "rgb"+(f[3]>-1||t[3]>-1?"a(":"(")+r((t[0]-f[0])*p+f[0])+","+r((t[1]-f[1])*p+f[1])+","+r((t[2]-f[2])*p+f[2])+(f[3]<0&&t[3]<0?")":","+(f[3]>-1&&t[3]>-1?r(((t[3]-f[3])*p+f[3])*10000)/10000:t[3]<0?f[3]:t[3])+")");
    else return "#"+(0x100000000+r((t[0]-f[0])*p+f[0])*0x1000000+r((t[1]-f[1])*p+f[1])*0x10000+r((t[2]-f[2])*p+f[2])*0x100+(f[3]>-1&&t[3]>-1?r(((t[3]-f[3])*p+f[3])*255):t[3]>-1?r(t[3]*255):f[3]>-1?r(f[3]*255):255)).toString(16).slice(1,f[3]>-1||t[3]>-1?undefined:-2);
}	
	

function drawFinalPolys(alt, lines) {
	push()
	let odd = false
	if (!lines) {
		noStroke()
	} else {
		stroke(PAL[10])
		strokeWeight(SIZE[2])
	}
	fill(PAL[2])
	a = 73 ; b = 26 ; c = 72 ; d = 1 ; e = 61 ; f = 37
	for (let i=0; i<12; i++) {
		if (alt && odd) {
			fill(PAL[3])
		} else {
			fill(PAL[2])
		}
		odd = !odd
		Q = []
		Q.push(P[a])
		Q.push(P[b])
		Q.push(P[c])
		Q.push(P[d])
		Q.push(P[e])
		Q.push(P[f])
		Q.push(P[a])
		filledPoly(Q)
		a = (a==84) ? 73 : a+=1
		b = (b==36) ? 25 : b+=1
		c = (c==72) ? 61 : c+=1
		d = (d==12) ? 1 : d+=1
		e = (e==72) ? 61 : e+=1
		f = (f==48) ? 37 : f+=1
	}
	pop()
}
function drawOuterPolys(alt, lines) {
	push()
	let odd = false
	if (!lines) {
		noStroke()
	} else {
		stroke(PAL[11])
		strokeWeight(SIZE[2])
	}
	fill(PAL[4])
	a = 49 ; b = 73 ; c = 37 ; d = 61 ; e = 27 ; f = 74
	for (let i=0; i<12; i++) {
		if (alt && odd) {
			fill(PAL[5])
		} else {
			fill(PAL[4])
		}
		odd = !odd
		Q = []
		Q.push(P[a])
		Q.push(P[b])
		Q.push(P[c])
		Q.push(P[d])
		Q.push(P[e])
		Q.push(P[f])
		Q.push(P[a])
		filledPoly(Q)
		a = (a==60) ? 49 : a+=1
		b = (b==84) ? 73 : b+=1
		c = (c==48) ? 37 : c+=1
		d = (d==72) ? 61 : d+=1
		e = (e==36) ? 25 : e+=1
		f = (f==84) ? 73 : f+=1
	}
	pop()
}

function drawMidPolys(alt, lines) {
	push()
	let odd = false
	if (!lines) {
		noStroke()
	} else {
		stroke(PAL[11])
		strokeWeight(SIZE[2])
	}
	a = 13 ; b = 60 ; c = 73 ; d = 49
	for (let i=0; i<12; i++) {
		if (alt && odd) {
			fill(PAL[7])
		} else {
			fill(PAL[6])
		}
odd = !odd
		Q = []
		Q.push(P[a])
		Q.push(P[b])
		Q.push(P[c])
		Q.push(P[d])
		Q.push(P[a])
		filledPoly(Q)
		a = (a==24) ? 13 : a+=1
		b = (b==60) ? 49 : b+=1
		c = (c==84) ? 73 : c+=1
		d = (d==60) ? 49 : d+=1
	}
	pop()
}

function drawInnerPolys(alt, lines) {
	push()
	let odd = false
	if (!lines) {
		noStroke()
	} else {
		stroke(PAL[11])
		strokeWeight(SIZE[2])
	}
	a = 13 ; b = 49 ; c = 14 
	for (let i=0; i<12; i++) {
		if (alt && odd) {
			fill(PAL[9])
		} else {
			fill(PAL[8])
		}
		odd = !odd
		Q = []
		Q.push(P[0])
		Q.push(P[a])
		Q.push(P[b])
		Q.push(P[c])
		Q.push(P[0])
		filledPoly(Q)
		a = (a==24) ? 13 : a+=1
		b = (b==60) ? 49 : b+=1
		c = (c==24) ? 13 : c+=1
	}
	pop()
}

function makePoints(x, y, drawPins, drawLines) {
	let CX = x
	let CY = y
	P = []
	let p = new createVector(x,y)
	P.push(p)
	
	ellipse( CX, CY, SIZE * 25)
	ellipse( CX, CY, SIZE * 24)

	// large circle points
	for (let i=0; i<12; i++) {
		p = makePoint(CX, CY, i*30, SIZE[1]/2)
		P.push(p)
		if (drawPins) pin(p.x, p.y)
	}
if (drawLines) {
		drawOuterLines(P[1], P[4], P[7], P[10])
		drawOuterLines(P[2], P[5], P[8], P[11])
		drawOuterLines(P[3], P[6], P[9], P[12])
	}
	
	// small circle points
	ellipse( CX, CY, SIZE * 5)
	for (let i=0; i<12; i++) {
		p = makePoint(CX, CY, i*30, SIZE[0]/2)
		P.push(p)
		if (drawPins) pin(p.x, p.y)
	}
	
	// points around the three squares
	let q = new createVector(0,0)
	
	let a = 13 ; let b = 16 ; let c = 11 ; let d = 2

	for (let i=0; i<12; i++) {
		q = lineIntersection(P[a], P[b], P[c], P[d]); 
		P.push(q); 
		if (drawPins) pin(q.x, q.y)
		a = (a==24) ? 13 : a+=1
		b = (b==24) ? 13 : b+=1
		c = (c==12) ? 1 : c+=1
		d = (d==12) ? 1 : d+=1
	}

	a = 21 ; b = 24 ; c = 11 ; d = 2
	for (let i=0; i<12; i++) {
		q = lineIntersection(P[a], P[b], P[c], P[d]);
  	P.push(q);
		if (drawPins) pin(q.x, q.y)
		a = (a==24) ? 13 : a+=1
		b = (b==24) ? 13 : b+=1
		c = (c==12) ? 1 : c+=1
		d = (d==12) ? 1 : d+=1
	}
	
	stroke('cyan')
	if (drawLines) {
		a = 13 ; b = 38 ; c = 25
		for (let i=0; i<12; i++) {
			lineDraw(P[a], P[b])
			lineDraw(P[a], P[c])
			a+=1
			b = (b==48) ? 37 : b+=1
			c+=1
		}
	}
a = 13 ; b = 38 ; c = 14 ; d = 26
	for (let i=0; i<12; i++) {
		q = lineIntersection(P[a], P[b], P[c], P[d]);
  	P.push(q);
		if (drawPins) pin(q.x, q.y)
		a = (a==24) ? 13 : a+=1
		b = (b==48) ? 37 : b+=1
		c = (c==24) ? 13 : c+=1
		d = (d==36) ? 25 : d+=1
	}

	a = 11 ; b = 2 ; c = 1 ; d = 4
	for (let i=0; i<12; i++) {
		q = lineIntersection(P[a], P[b], P[c], P[d]);
  	P.push(q);
		if (drawPins) pin(q.x, q.y)
		a = (a==12) ? 1 : a+=1
		b = (b==12) ? 1 : b+=1
		c = (c==12) ? 1 : c+=1
		d = (d==12) ? 1 : d+=1
	}

	a = 24 ; b = 37 ; c = 14 ; d = 26
	for (let i=0; i<12; i++) {
		q = lineIntersection(P[a], P[b], P[c], P[d]);
  	P.push(q);
		if (drawPins) pin(q.x, q.y)
		a = (a==24) ? 13 : a+=1
		b = (b==48) ? 37 : b+=1
		c = (c==24) ? 13 : c+=1
		d = (d==36) ? 25 : d+=1
	}
	
}

function pointInBox(x,y, left, top, width, height) {
	if (x > left && x < left+width && y > top && y < top + height) {
		return true 
	} else {
		return false	
	}
}

function pin(x,y) {
	push()
	fill('red')
	stroke('yellow')
	ellipse(x,y,5,5)
	pop()
}

function pinPt(p) {
	ellipse(p.x,p.y,5,5)
}
